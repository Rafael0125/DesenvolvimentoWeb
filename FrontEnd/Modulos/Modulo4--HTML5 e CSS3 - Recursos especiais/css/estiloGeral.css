

/*          MÓDULO 04 -- HTML5 e CSS3 - Recursos especiais

    Estou colocando Id's no 'Body' de cada aula para que assim não seja preciso comentar todos os codigos, e quando eu quiser acessar de novo os link e arquivos feitos eles funcionarem corretamente com as suas respectivas configurações;

    As explicações ficaram em comentarios acima dos codigos de suas respectivas aulas

*/

/***************************************  Aula 01 -- Normalize CSS*******************************\
    Serve para padronizar configurações em browser diferentes;
    O nomalize pode ser copiado online pesquisando "nomalize css" no Google e entrando no primeiro link
    
*/    
/**************************************** Aula 01 -- FIM ****************************************/

/***************************************  Aula 02 -- Box Sizing & Cantos Arredondados
    
        Border-radius {
            Define um arredondamento da caixa;
            Podmeos usar para fazer o efeito de uma foto de perfil, que a foto fica redonda, como no intagram ou facebook;

            O ideal para fazer o arredondamento de uma imagem é que ela tenha a mesma medida de altura e largura;

            As medidas oodem ser declaradas da mesma maneira que uma margin ou padding,Exemplo:
                        'border-radius: 10px 50px 80px 100px;' ou
                        'border-radius: 20px 90px;';

            Em algumas versões mais antigas de browser temos que usar 'prefixos' para que o navegador possa interpretar corretamente o border-radius;

            Exemplos de prefixos:
                            -webkit-border-radius: 20px 90px; **Prefixo para versões do Google Chome e Safari**
                            -moz-border-radius: 20px 90px; **Prefixo para versões do Mozila Firefox**

            Link para a definição do border-radius:
                'https://www.w3schools.com/cssref/css3_pr_border-radius.asp'
        }

        box-sizing: border-box;{
            Usando o "box-sizing" com o valor "border-box;" ele mantem o tamanho da caixa definido, então quando adcionarmos um "padding" o tamanho da caixa não será alterado por exemplo;

            O "box-sizing" também é uma propriedade relativamente nova, então algumas vaezes sera necessario usar os prefixos:
                    -webkit-box-sizing: border-box;**Prefixo para versões do Google Chome e Safari**
                    -moz-box-sizing: border-box;**Prefixo para versões do Mozila Firefox**

        }



*/

#aula02 #caixa{ /* Exemplo de caixa sem 'box-sizing' */
    width: 300px;
    height: 300px;
    background: #b9c941;
    padding: 50px;
    margin: 15px;
    border-radius: 380px;  
    border-radius: 10px 50px 80px 100px; 
    border-radius: 20px 90px;
}

#aula02 #caixa2{ /* Exemplo de caixa com 'box-sizing' */
    width: 300px;
    height: 300px;
    background: #b9c941;
    padding: 50px;
    margin: 25px;
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    border-radius: 380px;  
    border-radius: 10px 50px 80px 100px; 
    border-radius: 20px 90px;
}

/**************************************** Aula 02 -- FIM ****************************************/

/***************************************  Aula 03 -- Degradês e Transparencia

    Transparencia{

        Usando o "background" com o valor 'rgba' podemos definir uma cor usando o r(red), g(green) e o b(blue) e usando a ultima propriedade o 'a' definimos a opacidade a cor, exemplo:
            background: rgba(255, 255, 255,0.5);

        Sendo o valor '0' de opacidade definindo que não aparecera nenhuma cor;

        E o valor '1' de opacidade definindo que a cor aparecera normalmente;
        Então entre 0 e 1 é onde formatamos a opacidade da cor.
    }
    background: linear-gradient(red, yellow, green, blue);{
        Usado para fazer um degradê de cores em um elemento definindo as cores red,yellow,green e blue;
        
        Podemos tambem definir a direção do efeito gradiênte usando:
                    "to left", "to right", "to top", "to bottom";

                background: linear-gradient(to top, red, yellow, green, blue);
                As definições sempre partiram do primeiro valor que foi inserido, que no exemplo a cima é o vermelho que saira de baixo e acaba com o azul na parte de cima;

        Podemos tambem definir em graus a rotação:
                background: linear-gradient(40deg, red, yellow, green, blue);

        Usamos o "background: radial-gradient(red,green);" para fazer um degrade em circulos com o primeiro valor sendo o mais central.

    }

*/

#aula03 #caixa{

    width: 300px;
    height: 300px;
    background: radial-gradient(black, black, red, red,black,black,black);
    /*background: linear-gradient(to top, red, yellow, green, blue);
    background: url(../Aula03_degrades_transparencias/imagens/camera.png);
    opacity: 0.5;  para deixar a imagem opaca*/

}

#aula03 #caixa2{

    width: 300px;
    height: 300px;
    background: linear-gradient(to top, red, yellow, green, blue);
    
}

/**************************************** Aula 03 -- FIM ****************************************/

/***************************************  Aula 04 -- Sombras
    Sombras{
                text-shadow: 20px 20px black ;
                    Podemos movimentar que nem um padding, por exemplo;
                    Usado para aplicar uma sombra em um texto;
                    O primeiro parametro movimenta a sombra na horizontal;

                    O segundo parametro movimenta a na vertical;

                    O terceiro parametro aplicar um "BLUR", que é um borrado na sombra;

                    O ultimo parametro é a cor da sombra, podendo ser definido com o nome das cores, um código exadecimal, um RGB e um RGBA, sendo possivel aplicar a opacidade na sombra.

                    Ela se comporta como um background então não afeta os elementos de texto;

                    Podemos tambem aplicar uma sombra direto em uma div usando o "box-shadow: 20px 20px 6px black;"

                    Seguindo os mesmo parametros explicados a cima;

                    No box-shadow temos um quarto parametro chamado "SPREAD" que é o espalhamento da sombra para aplicar um tamanho na sombra, exemplo:
                            box-shadow: 20px 20px 2px 20px black;
    }

*/
#aula04 #caixa{
    width: 300px;
    height: 300px;
    padding: 8px;
    margin: 20px;
    background: #009670;
    box-shadow: 40px 200px 2px 10px  black;
}

#aula04 #caixa h1{
    color: white;
    text-shadow: 20px 20px 2px rgba(255, 0, 0, 0.6) ;


}

/**************************************** Aula 04 -- FIM ****************************************/

/***************************************  Aula 05 -- Animações{
    Animações em CSS são possibilidades de a partir de determinadas formatações ir para outra formatação;

    Para usar animações temos que fazer algumas formatações:
        @keyframes animacao-caixa == Para identificar que estamos criando uma animação e colocamos o nome para a animação assim como colocamos o nome para formatar uma propriedade CSS;

        Então criamos a animação separada e usamos dentro do nosso identificador da caixa como uma propriedade CSS

        @keyframes animacao-caixa{
            from{} 'Estilo Inicial'
            to{} 'Estilo Final'
        }

        Então aplicamos a animação como uma propriedade usando o 
            animation-name: animacao-caixa;

        E aplicamos o tempo de duração da animação usando o 
                animation-duration: 5s;

        Podemos aplicar outras propriedades nas animações como por exemplo
            border-radius:30px;

        Usando o "animation-delay: 3s;" direto no elemento CSS podemos aplicar um delay de tempo na animação;

        Podemos fazer a animação ser execultada mais de uma vez com o
            "animation-iteration-count: 5;"  Sendo o valor o numero de vezes que ela repetirá;

        Podemos tambem alterar a direção da animação com o 
            animation-direction: alternate;

        Assim como o background podemos alinhar todas essas formatações dentro de uma unica propriedade:
            "animation: (NOME-DA-ANIMAÇÃO) (DURAÇÃO DA ANIMAÇÃO) (DELAY DA ANIMAÇÃO) (QUANTIDADE DE EXECUÇÕES DA ANIMAÇÃO) (A DIREÇÃO DA ANIMAÇÃO) ;"
                animation: animacao-caixa 5s 3s 5 alternate;

        Podemos movimentar a div usando a animação, declarando a posição da div como relativa e aplicando a movimetação na formatação da animação


        Podemos tambem colocar para mudar durante a animação


    }
*/

/* Para a animação funcionar direito nos browsers é preciso usar prefixos

@-webkit-keyframes animacao-caixa{
    from{
        background: red;

    } 
    to{
        background: green;
    }

}
@-moz-keyframes animacao-caixa{
    from{
        background: red;

    } 
    to{
        background: green;
    }

}
@-o-keyframes animacao-caixa{
    from{
        background: red;

    } 
    to{
        background: green;
    }

}*/
@keyframes animacao-caixa{
    from{
        background: red;
        border-radius: 0px;
        box-shadow: 40px 200px 0px 10px  green; 
        top: 0;
        left: 0;
    } 
    to{
        background: green;
        border-radius: 300px;
        box-shadow: 40px 200px 20px 10px  red;
        top: 200px;
        left: 200px;
    }
}

#aula05 #caixa{
    margin: 20px;
    width: 300px;
    height: 300px;
    background: red;
    position: relative;
    /*animation-name: animacao-caixa;
    animation-duration: 1s;
    animation-delay: 0s; 
    animation-iteration-count: 5;
    animation-direction: alternate;*/
    animation: animacao-caixa 5s 0s 5 alternate;
}

#aula05 #caixa2{
    margin: 20px;
    width: 300px;
    height: 300px;
    background: red;
    position: relative;
    /*animation-name: animacao-caixa;
    animation-duration: 1s;
    animation-delay: 0s; 
    animation-iteration-count: 5;
    animation-direction: alternate;*/
    animation: animacao-caixa 5s 0s 5 alternate;
}

/**************************************** Aula 05 -- FIM ****************************************/

/***************************************  Aula 06 -- Transições
    Para fazer transições usamos a propriedade "transition:;" dentro do HOVER do elemento que queremos mudar colocando o valor que queremos mudar e o tempo, por exemplo:
        transition: width 3s ;

    Podemos tambem declarar mais de uma mudança no transition com por exemplo:
        transition: width 3s, background 3s ;

    É possivel tambem inserir as mudanças que queremos no hover e usar apenas uma unica formatação de transition por exemplo:
        #aula06 #caixa:hover{
            width: 400px;
            background: red;
            transition: all 3s;
        }

    Assim faremos todas as formatações do hover em 3 segundos.

    Para fazer o efeito de transição o recomendado é usar os prefixos:
        -webkit-transition: ;
        -moz-transition: ;
        -o-transition: ;

*/

#aula06 #caixa{
    width: 300px;
    height: 300px;
    background: orange;
}

#aula06 #caixa:hover{
    width: 400px;
    background: red;
    /*transition: width 3s, background 3s ;*/
    transition: all 3s;
}

/**************************************** Aula 06 -- FIM ****************************************/

/***************************************  Aula 07 - Aula 08 -- Novas tag's HTML5 */

/*Aula 07 HEADER, NAV, FOOTER{
    Para facilitar a leitura dos sites foram criadas novas Tag's no html5
        Podemos separar as páginas web com div exemplo:

            <div id="cabecalho">  Para o cabeçalho da página
            <div id="navegacao">  Para a navegação da página
            <div id="rodape">     Para o rodapé da página
        Porem leitores de páginas web não identificam os id's como as partes que decidimos que eles sejam na página então foram criadas tag's para identificar quais partes da página estamos nos referindo com por exemplo:

            1ª <header> Para o cabeçalho da página, exemplo:
                <header>
                    <h1>Logo</h1>
                    <p>
                        Meu site
                    </p>
                </header>

            2ª <nav> Para a navegação da pagina, exemplo:
                <nav>
                    <ul>
                        <li>
                            <a href="">Home</a>
                        </li>
                        <li>
                            <a href="">Sobre</a>
                        </li>
                        <li>
                            <a href="">Contato</a>
                        </li>
                    </ul>
                </nav>

            3ª <footer> Para o rodapé da pagina, exemplo:
                <footer>
                    <p>&copy; 2022 - Rafael Navarro</p>
                </footer>

        Então podemos formatar as tag's diretamente no CSS, sem ter a necessidade de usar id's
}*/

/*Aula 08 ARTICLE, SECTION, ASIDE, TIME{
    Para fazer os conteudos da pagina, como uma postagem por exemplo podemos usar:
        <div id="postagem">
    Que foi substituido pela nova tag <article>
    Dentro do article podemos criar seções usando a tag <section>, exemplo:

        <article>//1º ARTICLE
            <h3>Novos Cursos</h3>
            <section> // 1ªSECTION //
                <h4>Curso de Programação</h4>
                <p>
                    Lorem ipsum dolor sit amet consectetur adipisicing elit. Aliquam nobis, ipsam debitis saepe consequatur nostrum modi repellendus voluptas praesentium fuga eaque qui ipsum ullam ea expedita omnis provident quos fugiat.
                </p>
                <span> Atualizado em :20/04/2022</span>
            </section>

            <section> // 2ªSECTION //
                <h4>Curso de Graficos</h4>
                <p>
                    Lorem ipsum dolor sit amet consectetur adipisicing elit. Aliquam nobis, ipsam debitis saepe consequatur nostrum modi repellendus voluptas praesentium fuga eaque qui ipsum ullam ea expedita omnis provident quos fugiat.
                </p>
            </section>
        </article>
    
    Podemos formatar as tag's normalmente usando o CSS

    Temos tambem uma nova tag para fazer uma definição de datas para estruturar melhor os conteudos assim como as outras Tag's
            <time>20/04/2022</time>

    Para criar conteudos laterais foi criado a tag <aside> para separar em um campo diferente do <article>

}*/


#aula07_Aula08 header{
    border: 1px solid #ccc;
    background: rgb(248, 233, 233);
    padding: 5px;
}

#aula07_Aula08 nav{
    border: 1px solid red;
    background: #f2f2f2;
    padding: 10px;
}

#aula07_Aula08 footer{
    text-align: center;
    background: #ccc;
}

#aula07_Aula08 article{
    background: orange;
}

#aula07_Aula08 section{
    border: 1px dotted #fff;
    padding: 10px;
}

#aula07_Aula08 aside{
    background: blue;
}

/**************************************** Aula 07 E 08 -- FIM ****************************************/

/***************************************  Aula 09 -- Compatibilidade Html5
    Essas novas tag's podem trazer alguns problemas com navegadores mais antigos que podem não interpretar corretamente essas tag's novas como por exemplo o internet explorer, e como isso foi um problema para muitos desenvolvedores foram criadas ferramentas para corrigir esse erro:

    Html Shiv pode ser localizado pesquisando no google

    <!--[if lt IE 9]>
        <script src="bower_components/html5shiv/dist/html5shiv.js"></script>
    <![endif]-->

    Com essas linhas de código conseguimos fazer o internet explorer interpretar corretamente as novas Tag's;

    Usando o arquivo copiado online ou usando o proprio link do html shiv podemos inclur essa formatação no nosso código, eu usei o arquivo que esta dentro da pasta "js" para incluir o Shiv;
    Com isso as tag's podem ser interpretadas corretamente em versões anteriores antigas do internet explorer.

*/

/**************************************** Aula 09 -- FIM ****************************************/

/***************************************  Aula 11 até aula 13 -- Flexbox*/

/* Aula 11 - Flexbox container
    A propriedade Flex Box permite que se dispõem elementos em um contêiner de maneira muito mais simples e poderosa permite que você deixe os seus slides muito mais flexíveis
    Quando você utiliza a propriedade Flex Box você passa a ter um contêiner e dentro dele nós temos Flex itens que são itens dentro desse contêiner que você utiliza a propriedade Flex box.

        Podemos aplicar o "display: flex;" // Para definir o display nos elementos

        Usamos o "flex-direction:;" para aplicar o posicionamento e direção do flex, seus valores são:

            flex-direction: row; // Posicionamento normal dos itens;
            flex-direction: row-reverse; // Posicionamento reverso dos itens, começa pelo ultimo item;
            flex-direction: column; // Posiciona os itens em colunas;
            flex-direction: column-reverse; // Posiciona os itens em colunas na ordem reversa;

        Temos a propriedade "flex-wrap: ;" para definir quebras de layout, seus valores são:

        flex-wrap: nowrap; // Não terá quebra de layout;
        flex-wrap: wrap; // Terá quebra de layout;
        flex-wrap: wrap-reverse; // Terá quebra de layout reverso;

        Podemos usar a propriedade justify-content:; para definir o posicionamento das caixas flex na horizontal, seus valores são:

            justify-content: flex-start; // Fica na posição inicial;
            justify-content: flex-end; // Ajusta os itens no final da pagina;
            justify-content: center; // Ajusta os itens no centro da página;
            justify-content: space-between; // Distribui os itens colocando um espaçamento entre eles, ajustando o espaço entre eles para ser igual em todos, deixando os itens nas extremidades colados nas laterais;
            justify-content: space-around; // Distribui os itens colocando um espaçamento entre eles, ajustando o espaço entre eles para ser igual em todos, deixando os itens nas extremidades afastados das laterais;

        Temos tambem a propriedade "align-items:;" na vertical, seus valores são:

            align-items:stretch; // Valor padrão no qual os itens ficam esticados;
            align-items:center; // Posiciona os itens ao centro da página;
            align-items:flex-start; // Os itens ficam posicionados na parte superior
            align-items:flex-end; // Os itens ficam posicionados na parte inferior
            align-items:baseline; // Posiciona os itens alinhados com o texto da parte de cima dos itens
*/
/* Aula 12 - Flexbox Itens - parte 1
    O Flexbox falicita e muito na disposição da página, pois não temos que usar o float e margin para alinhar os itens da página;

    Para ordenar os itens podemos criar classes, que no exemplo esta como ".ordem1" até ".ordem4" e assim coloca-las nos itens para alterar a posição delas na página usando a propriedade "order: 1;" para fazer essa configuração, exemplo:

        #aulaFlexbox .ordem1{
            order: 1;
        }
        #aulaFlexbox .ordem2{
            order: 2;
        }

    Assim aplicando essas classes nos itens da página podemos formatar a posição deles;
    Por padrão o valor de posição dos elementos é 0;
    Podemos usar numeros negativos para posicionar os itens;

    flex-grow:; //Define a proporção de espaço ocupado por um item;
        Colocando o valor de flex-grow: 1; em apenas um item ele ocupará todo o espaço disponivel no container;
        E apenas o item com o valor um será reduzido quando diminuirmos o espaço da página;
        Se colocar em todos os itens eles se ajustam em relação ao container;
        Se aplicarmos um valor maior ele pasará a ocupar mais espaço;
        Então basicamente esse número ele define um valor proporcional que o seu item vai ocupar com relação aos outros itens;
        Se reduzirmos o tamanho da página eles se ajeitam proporcionalmente;

*/
/* Aula 13 - Flexbox Itens - parte 2
    Podemos definir a capacidade de redução dos itens usando o :
        "flex-shrink:;"
        Por padrão os itens estão com o "flex-shrink:1;"
        Quanto maior o numero no flex-shrink, o item ficará menor, então um item com 'flex-shrink: 6;' ficará menor do que um item com 'flex-shrink: 2;' por exemplo;

    Para indicar o tamanho inicial do flex item antes da distribuição do espaço restante, usamos:
        "flex-basis:;" 
        O valor padrão é "auto" que define que o tamanho inicial dos itens é automatico

*/


#aulaFlexbox #conteudo{
    background: #dcdcdc;
    height: 1000px;
    display: flex;
    flex-wrap: wrap;
    flex-direction:column;/*
    flex-wrap: nowrap;
    justify-content: space-around;
    align-items:baseline;*/
}

#aulaFlexbox .item{
    width: 100px;
    height: 100px;
    background: white;
    border: 1px solid gray;
    margin: 10px;
    /*flex-basis: 100px;*/
}
/*
#aulaFlexbox .ordem1{
    order: 1;
}

#aulaFlexbox .ordem2{
    order: 2;
}

#aulaFlexbox .ordem3{
    order: 3;
}

#aulaFlexbox .ordem4{
    order: 4;
}*/

#aulaFlexbox .item1{
    flex-grow: 4;
    flex-shrink:  1;
}

#aulaFlexbox .item2{
    flex-grow: 2;
    flex-shrink: 1;
}
#aulaFlexbox .item3{
    flex-grow: 1;
    flex-shrink: 2;
}
#aulaFlexbox .item4{
    flex-grow: 4;
    flex-shrink: 3;
}













/**************************************** Aula 11 à 13 -- FIM ****************************************/
